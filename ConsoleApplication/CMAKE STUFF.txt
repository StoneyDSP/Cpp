# Debug build specs

# Compiler args...

/c /IC:\CPP\CONSOLEAPPLICATION /Zi /nologo /W4 /WX- /diagnostics:column /Ox /GL /D _CRT_SECURE_NO_WARNINGS /D WIN32 /D _WINDOWS /D NDEBUG /D _LIB /Gm- /EHsc /MD /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /GR /std:c++17 /Fo"C:\CPP\CONSOLEAPPLICATION\BIN\X64\RELEASE\INTERMEDIATES\\" /Fd"C:\CPP\CONSOLEAPPLICATION\BIN\X64\RELEASE\INTERMEDIATES\VC143.PDB" /external:W4 /Gd /TP /FC C:\CPP\CONSOLEAPPLICATION\SRC\MAIN.CPP

# Linker args...

/OUT:"C:\CPP\CONSOLEAPPLICATION\BIN\X64\RELEASE\CONSOLEAPPLICATION.EXE" /INCREMENTAL:NO /NOLOGO KERNEL32.LIB USER32.LIB GDI32.LIB WINSPOOL.LIB SHELL32.LIB OLE32.LIB OLEAUT32.LIB UUID.LIB COMDLG32.LIB ADVAPI32.LIB /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /PDB:"C:/CPP/CONSOLEAPPLICATION/RELEASE/CONSOLEAPPLICATION.PDB" /SUBSYSTEM:CONSOLE /LTCG:incremental /LTCGOUT:"C:\CPP\CONSOLEAPPLICATION\BIN\X64\RELEASE\INTERMEDIATES\CONSOLEAPPLICATION.IOBJ" /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:/CPP/CONSOLEAPPLICATION/RELEASE/CONSOLEAPPLICATION.LIB" /MACHINE:X64  /machine:x64 C:\CPP\CONSOLEAPPLICATION\BIN\X64\RELEASE\INTERMEDIATES\\MAIN.OBJ



# Debug build specs

# Compiler args...

/c /IC:\CPP\CONSOLEAPPLICATION /Zi /nologo /W4 /WX- /diagnostics:column /Od /D _CRT_SECURE_NO_WARNINGS /D WIN32 /D _WINDOWS /D DEBUG /D _DEBUG /D _LIB /Gm- /EHsc /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /GR /std:c++17 /Fo"C:\CPP\CONSOLEAPPLICATION\BIN\X64\DEBUG\INTERMEDIATES\\" /Fd"C:\CPP\CONSOLEAPPLICATION\BIN\X64\DEBUG\INTERMEDIATES\VC143.PDB" /external:W4 /Gd /TP /FC C:\CPP\CONSOLEAPPLICATION\SRC\MAIN.CPP

# Linker args...

/OUT:"C:\CPP\CONSOLEAPPLICATION\BIN\X64\DEBUG\CONSOLEAPPLICATION.EXE" /INCREMENTAL /ILK:"C:\CPP\CONSOLEAPPLICATION\BIN\X64\DEBUG\INTERMEDIATES\CONSOLEAPPLICATION.ILK" /NOLOGO KERNEL32.LIB USER32.LIB GDI32.LIB WINSPOOL.LIB SHELL32.LIB OLE32.LIB OLEAUT32.LIB UUID.LIB COMDLG32.LIB ADVAPI32.LIB /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"C:\CPP\CONSOLEAPPLICATION\BIN\X64\DEBUG\INTERMEDIATES\CONSOLEAPPLICATION.PDB" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"C:\CPP\CONSOLEAPPLICATION\BIN\X64\DEBUG\INTERMEDIATES\CONSOLEAPPLICATION.LIB" /MACHINE:X64  /machine:x64 C:\CPP\CONSOLEAPPLICATION\BIN\X64\DEBUG\INTERMEDIATES\\MAIN.OBJ


# Cmake things to try

# 1.

# CMake instructions

set(dir ${CMAKE_CURRENT_SOURCE_DIR}/../Compile/)
set(EXECUTABLE_OUTPUT_PATH ${dir} CACHE PATH "Build directory" FORCE)
set(LIBRARY_OUTPUT_PATH ${dir} CACHE PATH "Build directory" FORCE)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${dir})
set(CMAKE_BUILD_FILES_DIRECTORY ${dir})
set(CMAKE_BUILD_DIRECTORY ${dir})
set(CMAKE_BINARY_DIR  ${dir})
SET(EXECUTABLE_OUTPUT_PATH ${dir})
SET(LIBRARY_OUTPUT_PATH ${dir}lib)
SET(CMAKE_CACHEFILE_DIR ${dir})

# 2.

# Ensure that we do an out of source build

MACRO(MACRO_ENSURE_OUT_OF_SOURCE_BUILD MSG)
     STRING(COMPARE EQUAL "${CMAKE_SOURCE_DIR}"
     "${CMAKE_BINARY_DIR}" insource)
     GET_FILENAME_COMPONENT(PARENTDIR ${CMAKE_SOURCE_DIR} PATH)
     STRING(COMPARE EQUAL "${CMAKE_SOURCE_DIR}"
     "${PARENTDIR}" insourcesubdir)
    IF(insource OR insourcesubdir)
        MESSAGE(FATAL_ERROR "${MSG}")
    ENDIF(insource OR insourcesubdir)
ENDMACRO(MACRO_ENSURE_OUT_OF_SOURCE_BUILD)

MACRO_ENSURE_OUT_OF_SOURCE_BUILD(
    "${CMAKE_PROJECT_NAME} requires an out of source build."
)


# vcpkg installs...

asio

# asio provides CMake targets:
    # this is heuristically generated, and may not be correct
    find_package(asio CONFIG REQUIRED)
    target_link_libraries(main PRIVATE asio asio::asio)

# cppunit provides CMake targets:
    # this is heuristically generated, and may not be correct
    find_package(CppUnit CONFIG REQUIRED)
    target_link_libraries(main PRIVATE CppUnit)

# portaudio provides CMake targets:
    # this is heuristically generated, and may not be correct
    find_package(portaudio CONFIG REQUIRED)
    target_link_libraries(main PRIVATE portaudio)

# portmidi provides CMake targets:
    # this is heuristically generated, and may not be correct
    find_package(PortMidi CONFIG REQUIRED)
    target_link_libraries(main PRIVATE PortMidi::portmidi)

# portsmf provides CMake targets:
    # this is heuristically generated, and may not be correct
    find_package(PortSMF CONFIG REQUIRED)
    target_link_libraries(main PRIVATE PortSMF::PortSMF)

# matplotlib-cpp



Vcpkg as a Submodule
When using vcpkg as a submodule of your project, you can add the following to your CMakeLists.txt before the first project() call, instead of passing CMAKE_TOOLCHAIN_FILE to the cmake invocation.

set(CMAKE_TOOLCHAIN_FILE "${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake"
  CACHE STRING "Vcpkg toolchain file")
This will still allow people to not use vcpkg, by passing the CMAKE_TOOLCHAIN_FILE directly, but it will make the configure-build step slightly easier.


Using vcpkg with CMake
Visual Studio Code with CMake Tools
Adding the following to your workspace settings.json will make CMake Tools automatically use vcpkg for libraries:

{
  "cmake.configureSettings": {
    "CMAKE_TOOLCHAIN_FILE": "[vcpkg root]/scripts/buildsystems/vcpkg.cmake"
  }
}
Vcpkg with Visual Studio CMake Projects
Open the CMake Settings Editor, and under CMake toolchain file, add the path to the vcpkg toolchain file:

[vcpkg root]/scripts/buildsystems/vcpkg